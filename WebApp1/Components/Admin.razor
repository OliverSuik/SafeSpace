@inject IJSRuntime JS;


<div class="plan">
    <div class="admin-content"
         @onclick="async (e) => {await UpdateUserName(); }" value="@CreatedSeats">
        <div class="d-flex">
            <div class="btn-group btn-group-toggle" data-toggle="buttons">
                <label class="btn btn-outline-primary" @onclick="ChangeAddActive">
                    <input type="radio" name="options" id="option2" autocomplete="off" checked>ADD
                </label>
                <label class="btn btn-outline-primary ml-2" @onclick="ChangeSelectActive">
                    <input type="radio" name="options" id="option3" autocomplete="off">SELECT
                </label>
            </div>
            <div class="pt-2 ml-1">

            </div>
            <input type="checkbox" class="btn-check" id="btn-check-outlined" autocomplete="off" @bind="_copyOn" hidden>
            <label for="btn-check-outlined" class="btn btn btn-outline-primary ml-auto p-2 m-0">COPY</label>
            <div type="button" class="btn btn btn-outline-primary ml-2 p-2" @onclick="DeleteSelected">REMOVE</div>
            <div type="button" class="btn btn btn-outline-primary ml-2" @onclick="Undo">UNDO</div>
        </div>
        <p class="pt-2 mb-1">Number of seats: @(_seats.Count == 0 ? "-" : _seats.Count.ToString())</p>
        <div class="image-container" style="cursor: url(@_cursorImageAdd), auto;"
             @onclick="ClickOnPlan"
             @onmousedown="StartSelecting"
             @onmousemove="SelectionMove"
             @onmouseup="EndSelecting">

            @for (int i = 0; i < _seats.Count; i++)
            {
                <div class="square-selected-admin" draggable="true"
                     style="left: @(_seats[i].X - _screenOffsetX)px; top: @(_seats[i].Y - _screenOffsetY)px; z-index: @_seats[i].ZIndex;background-color: @(_seats[i].Selected ? "rgba(200, 200, 200, 0.80)" : "rgb(95, 170, 255, 0.70)");color: @(_seats[i].Selected ? "black" : "white")"
                     @onclick="ClickOnSeat"
                     @ondragstart="PickUp"
                     @ondragend="PutDown"
                     @onmouseover="ChangeMouseOver"
                     @onmouseout="ChangeMouseOut">
                    <div class="seatMenu" hidden="@_seats[i].MenuHidden">
                        <div type="button" class="btn btn-primary" @onclick:stopPropagation="true" @onclick="RemoveSeat">REMOVE</div>
                    </div>
                </div>
            }
            <div class="floor-image" style="background-image: url(@_backGroundImage)">
                <div class="selection-box" hidden="@_selectionHidden"
                     style="left: @(_selectionLeft - _screenOffsetX)px; top: @(_selectionTop - _screenOffsetY)px; width: @(_selectionWidth)px; height: @(_selectionHeight)px"></div>
            </div>
        </div>
    </div>
    @*<input class="form-control" @onchange="async (e) => { CreatedSeats = _cursorImageAdd; await UpdateUserName(); }" value="@CreatedSeats" />*@
</div>

@code {
    [Parameter]
    public string CreatedSeats { get; set; }

    public async Task UpdateUserName()
    {
        CreatedSeats = "";
        foreach (Seat seat in _seats)
        {
            CreatedSeats = CreatedSeats + seat.X + "," + seat.Y + ",";
        }

        //CreatedSeats.Add(_seats[0].X);
        //CreatedSeats.Add(_seats[0].Y);
        await JS.InvokeVoidAsync("updateCreatedSeats", CreatedSeats);
    }

    private List<Seat> _seats = new List<Seat>();
    private List<Seat> _seatsHistory = new List<Seat>();
    private List<Seat> _seatsMoved = new List<Seat>();
    private Seat _startPos = new Seat();
    private bool _addIsActive = true;
    private bool _lastActionAdd;
    private bool _selectIsActive;
    private String _cursorImageAdd = "https://i.ibb.co/HPDsDBz/Untitled.png";
    private String _backGroundImage = "https://eu-central-1.linodeobjects.com/wemply/abb/public/55ef77ff25714b63844cf34590d835ac.4.svg";
    private bool _mouseOnSeat;
    private bool _copyOn;

    //Constants
    private int _screenOffsetX = 396;
    private int _screenOffsetY = 267;
    private int _imageWidth = 500;
    private int _imageHeight = 1500;
    private int _squareWidth = 30;
    private int _squareHeight = 30;

    //Selecting
    private List<Seat> _selectedSeats = new List<Seat>();
    private double _selectionLeft;
    private double _selectionTop;
    private double _selectionHeight;
    private double _selectionWidth;
    private double _x1;
    private double _x2;
    private double _y1;
    private double _y2;
    private bool _selectionHidden = true;

    private void ChangeMouseOver()
    {
        _mouseOnSeat = true;
    }

    private void KeyUp(KeyboardEventArgs e)
    {
        _copyOn = true;
    }

    private void ChangeMouseOut()
    {
        _mouseOnSeat = false;
    }

    private void ClickOnPlan(MouseEventArgs e)
    {
        if (_addIsActive && !_mouseOnSeat)
        {
            AddSeat(e);
        }
    }

    private void ClickOnSeat(MouseEventArgs e)
    {
        if (_mouseOnSeat)
        {
            ChangeSeat(e);
        }
    }

    private void ChangeSeat(MouseEventArgs e)
    {
        foreach (Seat seat in _seats)
        {
            if ((seat.X <= e.ClientX && seat.X + _squareWidth >= e.ClientX) && (seat.Y <= e.ClientY && seat.Y + _squareHeight >= e.ClientY))
            {
                seat.MenuHidden = !seat.MenuHidden;
                seat.ZIndex = 1;
                seat.Selected = !seat.MenuHidden;
            }
            else
            {
                seat.MenuHidden = true;
                seat.ZIndex = 0;
                seat.Selected = false;
            }
        }
    }

    private void ChangeAddActive()
    {
        _selectIsActive = false;
        _addIsActive = true;
        _cursorImageAdd = "https://i.ibb.co/HPDsDBz/Untitled.png";
    }

    private void ChangeSelectActive()
    {
        _selectIsActive = true;
        _addIsActive = false;
        _cursorImageAdd = "";
    }

    private double FindClosestX(double x, double y, int offSet)
    {
        double currentClosest = Double.MaxValue;
        if (!_seats.Any())
        {
            return x;
        }
        foreach (Seat seat in _seats.Where(coordinate => Math.Abs(coordinate.X - x) < offSet && Math.Abs(coordinate.Y - y) < 50 &&
                                                                     Math.Abs(coordinate.X - x) < currentClosest))
        {
            currentClosest = seat.X;
        }
        return currentClosest == Double.MaxValue ? x : currentClosest;
    }

    private double FindClosestY(double y, double x, int offSet)
    {
        double currentClosest = Double.MaxValue;
        if (!_seats.Any())
        {
            return y;
        }
        foreach (Seat seat in _seats.Where(coordinate => Math.Abs(coordinate.Y - y) < offSet && Math.Abs(coordinate.X - x) < 50 &&
                                                                     Math.Abs(coordinate.Y - y) < currentClosest))
        {
            currentClosest = seat.Y;
        }
        return currentClosest == Double.MaxValue ? y : currentClosest;
    }

    private bool CheckIfInBounds(double x, double y)
    {
        if (x + _squareWidth - _screenOffsetX > _imageWidth || y + _squareHeight - _screenOffsetY > _imageHeight
        || x - _screenOffsetX < 0 || y - _screenOffsetY < 0)
        {
            return false;
        }
        foreach (Seat seat in _seats.Where(coordinate => (coordinate.X <= x + _squareWidth && coordinate.X + _squareWidth >= x + _squareWidth)
                                                               && (coordinate.Y <= y + _squareHeight && coordinate.Y + _squareHeight >= y + _squareHeight)))
        {
            return false;
        }
        Console.WriteLine("true");
        return true;
    }

    private void AddSeat(MouseEventArgs e)
    {
        UpdateHistory();
        _lastActionAdd = true;
        double coordX = e.ClientX;
        double coordY = e.ClientY;
        double closestX = FindClosestX(coordX, coordY, 10);
        double closestY = FindClosestY(coordY, coordX, 10);
        bool isInBounds = CheckIfInBounds(closestX, closestY);
        DeselectAll();
        if (isInBounds)
        {
            _seats.Add(new Seat()
            {
                X = (long)closestX,
                Y = (long)closestY
            }
                );
        }
    }

    private void RemoveSeat(MouseEventArgs e)
    {
        UpdateHistory();
        _lastActionAdd = false;
        _seats.RemoveAll(seat => seat.MenuHidden == false);
        _mouseOnSeat = false;
        DeselectAll();
    }

    private void DeleteSelected()
    {
        UpdateHistory();
        _lastActionAdd = false;
        _seats.RemoveAll(seat => seat.Selected);
    }

    private void UpdateHistory()
    {
        _seatsHistory.Clear();
        _seatsHistory.AddRange(_seats);
    }

    private void Undo()
    {
        if (!_lastActionAdd)
        {
            foreach (Seat seat in _seatsHistory)
            {
                if (!_seats.Contains(seat))
                {
                    _seats.Add(seat);
                }
            }
        }
        else
        {
            _seats.Clear();
            _seats.AddRange(_seatsHistory);
        }
        DeselectAll();
    }

    private void PickUp(MouseEventArgs e)
    {
        _startPos = new Seat
        {
            X = (long)e.ClientX,
            Y = (long)e.ClientY
        };
        foreach (Seat seat in _seats)
        {
            if (seat.Selected || (seat.X <= _startPos.X && seat.X + _squareWidth >= _startPos.X) && (seat.Y <= _startPos.Y && seat.Y + _squareHeight >= _startPos.Y))
            {
                _seatsMoved.Add(seat);
            }
        }

    }

    private void PutDown(MouseEventArgs e)
    {
        UpdateHistory();
        _lastActionAdd = true;

        foreach (Seat seat in _seatsMoved)
        {
            _seats.Remove(seat);
            double dragOffsetX = Math.Abs(seat.X - _startPos.X);
            double dragOffsetY = Math.Abs(seat.Y - _startPos.Y);
            double coordX = e.ClientX - dragOffsetX;
            double coordY = e.ClientY - dragOffsetY;
            double closestX = FindClosestX(coordX, coordY, 10);
            double closestY = FindClosestY(coordY, coordX, 10);
            bool isInBounds = CheckIfInBounds(closestX, closestY);
            if (isInBounds && !seat.Selected)
            {
                _seats.Add(new Seat()
                {
                    X = (long)closestX,
                    Y = (long)closestY
                }
                    );
                if (_copyOn)
                {
                    _seats.Add(seat);
                }
            }
            else
            {
                closestX = seat.X + e.ClientX - _startPos.X;
                closestY = seat.Y + e.ClientY - _startPos.Y;
                isInBounds = CheckIfInBounds(closestX, closestY);
                if (isInBounds)
                {
                    _seats.Add(new Seat()
                    {
                        X = (long)(seat.X + e.ClientX - _startPos.X),
                        Y = (long)(seat.Y + e.ClientY - _startPos.Y)
                    }
                        );
                    if (_copyOn)
                    {
                        _seats.Add(seat);
                    }
                }
                else
                {
                    _seats.Add(seat);
                }
            }
        }
        _startPos = new Seat();
        _seatsMoved.Clear();
        DeselectAll();
    }

    private void StartSelecting(MouseEventArgs e)
    {
        if (!_mouseOnSeat && !_addIsActive)
        {
            DeselectAll();
            _selectionHidden = false;
            _x1 = e.ClientX;
            _y1 = e.ClientY;
            ReCalcSelection();
        }
    }

    private void DeselectAll()
    {
        _selectedSeats.Clear();
        foreach (Seat seat in _seats)
        {
            seat.Selected = false;
            seat.MenuHidden = true;
        }
    }

    private void SelectionMove(MouseEventArgs e)
    {
        _x2 = e.ClientX;
        _y2 = e.ClientY;
        ReCalcSelection();
    }

    private void EndSelecting()
    {
        foreach (Seat seat in _seats)
        {
            if (seat.X < _selectionLeft + _selectionWidth && seat.X > _selectionLeft && seat.Y < _selectionHeight + _selectionTop && seat.Y > _selectionTop && !_addIsActive)
            {
                _selectedSeats.Add(seat);
                seat.Selected = true;
            }
        }
        _selectionHidden = true;
        _selectionLeft = 0;
        _selectionTop = 0;
        _selectionHeight = 0;
        _selectionWidth = 0;
    }

    private void ReCalcSelection()
    {
        double x3 = Math.Min(_x1, _x2);
        double x4 = Math.Max(_x1, _x2);
        double y3 = Math.Min(_y1, _y2);
        double y4 = Math.Max(_y1, _y2);
        _selectionLeft = x3;
        _selectionTop = y3;
        _selectionWidth = x4 - x3;
        _selectionHeight = y4 - y3;
    }

    public class Seat
    {
        public long X { get; set; }
        public long Y { get; set; }
        public bool MenuHidden { get; set; } = true;
        public bool Selected { get; set; }
        public int ZIndex { get; set; }
    }
}